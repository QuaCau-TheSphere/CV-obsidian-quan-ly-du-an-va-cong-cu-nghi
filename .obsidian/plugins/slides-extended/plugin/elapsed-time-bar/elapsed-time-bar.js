/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var o={id:"elapsed-time-bar",barColor:"rgb(200,0,0)",pausedBarColor:"rgba(200,0,0,.6)",isPaused:!1,isFinished:!1,allottedTime:null,timeProgressBar:null,startTime:null,pauseTime:null,pauseTimeDuration:0,handleReady(){let e=Reveal.getConfig();if(!e.allottedTime){console.warn('"allottedTime" property is required by the ElapsedTimeBar plugin.');return}this.barColor=e.barColor||this.barColor,this.pausedBarColor=e.pausedBarColor||this.pausedBarColor;let s,t=document.querySelector(".progress");e.progressBarHeight?(s=parseInt(e.progressBarHeight,10)+"px",t&&(t.style.height=s)):e.progress&&t?s=t.getBoundingClientRect().height+"px":s="3px";let i=document.createElement("div");i.classList.add("progress"),Object.entries({display:"block",position:"fixed",bottom:e.progress?s:0,width:"100%",height:s}).forEach(([r,a])=>{i.style[r]=a}),document.querySelector(".reveal").appendChild(i),this.timeProgressBar=document.createElement("div"),Object.entries({height:"100%",willChange:"width"}).forEach(([r,a])=>{this.timeProgressBar.style[r]=a}),i.appendChild(this.timeProgressBar),this.start(e.allottedTime)},loop(){if(this.isPaused)return;let s=+new Date-this.startTime-this.pauseTimeDuration;s>this.allottedTime?(this.timeProgressBar.style.width="100%",this.isFinished=!0):(this.timeProgressBar.style.width=s/this.allottedTime*100+"%",requestAnimationFrame(this.loop.bind(this)))},setBarColor(){this.isPaused?this.timeProgressBar.style.backgroundColor=this.pausedBarColor:this.timeProgressBar.style.backgroundColor=this.barColor},start(e,s=0){this.isFinished=!1,this.isPaused=!1,this.allottedTime=e,this.startTime=+new Date-s,this.pauseTimeDuration=0,this.setBarColor(),this.loop()},reset(){this.start(this.allottedTime)},pause(){this.isPaused||(this.isPaused=!0,this.pauseTime=+new Date,this.setBarColor())},resume(){this.isPaused&&(this.isPaused=!1,this.pauseTimeDuration+=new Date-this.pauseTime,this.pauseTime=null,this.setBarColor(),this.loop())}};Reveal.isReady()?o.handleReady():Reveal.addEventListener("ready",()=>o.handleReady());
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL3BsdWdpbi9yZXZlYWwuanMtZWxhcHNlZC10aW1lLWJhci9lbGFwc2VkLXRpbWUtYmFyLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBFbGFwc2VkVGltZUJhciA9IHtcbiAgICBpZDogJ2VsYXBzZWQtdGltZS1iYXInLFxuXG4gICAgLy8gZGVmYXVsdCB2YWx1ZVxuICAgIGJhckNvbG9yOiAncmdiKDIwMCwwLDApJyxcbiAgICBwYXVzZWRCYXJDb2xvcjogJ3JnYmEoMjAwLDAsMCwuNiknLFxuXG4gICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgIGlzRmluaXNoZWQ6IGZhbHNlLFxuXG4gICAgYWxsb3R0ZWRUaW1lOiBudWxsLFxuICAgIHRpbWVQcm9ncmVzc0JhcjogbnVsbCxcbiAgICBzdGFydFRpbWU6IG51bGwsXG4gICAgcGF1c2VUaW1lOiBudWxsLFxuICAgIHBhdXNlVGltZUR1cmF0aW9uOiAwLFxuXG4gICAgLyoqXG4gICAgICogaW5pdGlhbGl6ZSBlbGVtZW50c1xuICAgICAqL1xuICAgIGhhbmRsZVJlYWR5KCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSBSZXZlYWwuZ2V0Q29uZmlnKCk7XG5cbiAgICAgICAgLy8gYWN0aXZhdGUgdGhpcyBwbHVnaW4gaWYgY29uZmlnLmFsbG90dGVkVGltZSBleGlzdHMuXG4gICAgICAgIGlmICghY29uZmlnLmFsbG90dGVkVGltZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdcImFsbG90dGVkVGltZVwiIHByb3BlcnR5IGlzIHJlcXVpcmVkIGJ5IHRoZSBFbGFwc2VkVGltZUJhciBwbHVnaW4uJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgY29uZmlndXJhdGlvbnNcbiAgICAgICAgdGhpcy5iYXJDb2xvciA9IGNvbmZpZy5iYXJDb2xvciB8fCB0aGlzLmJhckNvbG9yO1xuICAgICAgICB0aGlzLnBhdXNlZEJhckNvbG9yID0gY29uZmlnLnBhdXNlZEJhckNvbG9yIHx8IHRoaXMucGF1c2VkQmFyQ29sb3I7XG5cbiAgICAgICAgLy8gY2FsYyBiYXJIZWlnaHQgZnJvbSBjb25maWcuYmFySGVpZ2h0IG9yIHBhZ2UtcHJvZ3Jlc3MgY29udGFpbmVyXG4gICAgICAgIGxldCBiYXJIZWlnaHQ7XG4gICAgICAgIGNvbnN0IHBhZ2VQcm9ncmVzc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzcycpO1xuICAgICAgICBpZiAoY29uZmlnLnByb2dyZXNzQmFySGVpZ2h0KSB7XG4gICAgICAgICAgICBiYXJIZWlnaHQgPSBwYXJzZUludChjb25maWcucHJvZ3Jlc3NCYXJIZWlnaHQsIDEwKSArICdweCc7XG5cbiAgICAgICAgICAgIC8vIG92ZXJyaWRlIGhlaWdodCBvZiBwYWdlLXByb2dyZXNzIGNvbnRhaW5lclxuICAgICAgICAgICAgcGFnZVByb2dyZXNzQ29udGFpbmVyICYmIChwYWdlUHJvZ3Jlc3NDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gYmFySGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcucHJvZ3Jlc3MgJiYgcGFnZVByb2dyZXNzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAvLyBnZXQgaGVpZ2h0IGZyb20gcGFnZS1wcm9ncmVzcyBjb250YWluZXJcbiAgICAgICAgICAgIGJhckhlaWdodCA9IHBhZ2VQcm9ncmVzc0NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgKyAncHgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZGVmYXVsdFxuICAgICAgICAgICAgYmFySGVpZ2h0ID0gJzNweCc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGUgY29udGFpbmVyIG9mIHRpbWUtcHJvZ3Jlc3NcbiAgICAgICAgY29uc3QgdGltZVByb2dyZXNzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRpbWVQcm9ncmVzc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwcm9ncmVzcycpO1xuICAgICAgICBPYmplY3QuZW50cmllcyh7XG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgICBib3R0b206IGNvbmZpZy5wcm9ncmVzcyA/IGJhckhlaWdodCA6IDAsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgaGVpZ2h0OiBiYXJIZWlnaHRcbiAgICAgICAgfSkuZm9yRWFjaCgoW2ssIHZdKSA9PiB7XG4gICAgICAgICAgICB0aW1lUHJvZ3Jlc3NDb250YWluZXIuc3R5bGVba10gPSB2O1xuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJldmVhbCcpLmFwcGVuZENoaWxkKHRpbWVQcm9ncmVzc0NvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gY3JlYXRlIGNvbnRlbnQgb2YgdGltZS1wcm9ncmVzc1xuICAgICAgICB0aGlzLnRpbWVQcm9ncmVzc0JhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBPYmplY3QuZW50cmllcyh7XG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIHdpbGxDaGFuZ2U6ICd3aWR0aCdcbiAgICAgICAgfSkuZm9yRWFjaCgoW2ssIHZdKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRpbWVQcm9ncmVzc0Jhci5zdHlsZVtrXSA9IHY7XG4gICAgICAgIH0pO1xuICAgICAgICB0aW1lUHJvZ3Jlc3NDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy50aW1lUHJvZ3Jlc3NCYXIpO1xuXG4gICAgICAgIC8vIHN0YXJ0IHRpbWVyXG4gICAgICAgIHRoaXMuc3RhcnQoY29uZmlnLmFsbG90dGVkVGltZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSByZXBlYXRlZGx5IHVzaW5nIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cbiAgICAgKi9cbiAgICBsb29wKCkge1xuICAgICAgICBpZiAodGhpcy5pc1BhdXNlZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBub3cgPSArbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWUgPSBub3cgLSB0aGlzLnN0YXJ0VGltZSAtIHRoaXMucGF1c2VUaW1lRHVyYXRpb247XG4gICAgICAgIGlmIChlbGFwc2VkVGltZSA+IHRoaXMuYWxsb3R0ZWRUaW1lKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVQcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgICAgIHRoaXMuaXNGaW5pc2hlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVQcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IGVsYXBzZWRUaW1lIC8gdGhpcy5hbGxvdHRlZFRpbWUgKiAxMDAgKyAnJSc7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5sb29wLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHNldCBjb2xvciBvZiBwcm9ncmVzcyBiYXJcbiAgICAgKi9cbiAgICBzZXRCYXJDb2xvcigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMudGltZVByb2dyZXNzQmFyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMucGF1c2VkQmFyQ29sb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVQcm9ncmVzc0Jhci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmJhckNvbG9yO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHN0YXJ0KHJlc2V0KSB0aW1lciB3aXRoIG5ldyBhbGxvdHRlZCB0aW1lLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbGxvdHRlZFRpbWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VsYXBzZWRUaW1lPTBdXG4gICAgICovXG4gICAgc3RhcnQoYWxsb3R0ZWRUaW1lLCBlbGFwc2VkVGltZSA9IDApIHtcbiAgICAgICAgdGhpcy5pc0ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hbGxvdHRlZFRpbWUgPSBhbGxvdHRlZFRpbWU7XG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gK25ldyBEYXRlKCkgLSBlbGFwc2VkVGltZTtcbiAgICAgICAgdGhpcy5wYXVzZVRpbWVEdXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuc2V0QmFyQ29sb3IoKTtcbiAgICAgICAgdGhpcy5sb29wKCk7XG4gICAgfSxcblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnN0YXJ0KHRoaXMuYWxsb3R0ZWRUaW1lKTtcbiAgICB9LFxuXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUGF1c2VkKSByZXR1cm47XG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnBhdXNlVGltZSA9ICtuZXcgRGF0ZSgpO1xuICAgICAgICB0aGlzLnNldEJhckNvbG9yKCk7XG4gICAgfSxcblxuICAgIHJlc3VtZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUGF1c2VkKSByZXR1cm47XG5cbiAgICAgICAgLy8gYWRkIHBhdXNlZCB0aW1lIGR1cmF0aW9uXG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wYXVzZVRpbWVEdXJhdGlvbiArPSBuZXcgRGF0ZSgpIC0gdGhpcy5wYXVzZVRpbWU7XG4gICAgICAgIHRoaXMucGF1c2VUaW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRCYXJDb2xvcigpO1xuICAgICAgICB0aGlzLmxvb3AoKTtcbiAgICB9XG59O1xuXG5pZiAoUmV2ZWFsLmlzUmVhZHkoKSkge1xuICAgIEVsYXBzZWRUaW1lQmFyLmhhbmRsZVJlYWR5KCk7XG59IGVsc2Uge1xuICAgIFJldmVhbC5hZGRFdmVudExpc3RlbmVyKCdyZWFkeScsICgpID0+IEVsYXBzZWRUaW1lQmFyLmhhbmRsZVJlYWR5KCkpO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7QUFBQSxJQUFNQSxFQUFpQixDQUNuQixHQUFJLG1CQUdKLFNBQVUsZUFDVixlQUFnQixtQkFFaEIsU0FBVSxHQUNWLFdBQVksR0FFWixhQUFjLEtBQ2QsZ0JBQWlCLEtBQ2pCLFVBQVcsS0FDWCxVQUFXLEtBQ1gsa0JBQW1CLEVBS25CLGFBQWMsQ0FDVixJQUFNQyxFQUFTLE9BQU8sVUFBVSxFQUdoQyxHQUFJLENBQUNBLEVBQU8sYUFBYyxDQUN0QixRQUFRLEtBQUssbUVBQW1FLEVBQ2hGLE1BQ0osQ0FHQSxLQUFLLFNBQVdBLEVBQU8sVUFBWSxLQUFLLFNBQ3hDLEtBQUssZUFBaUJBLEVBQU8sZ0JBQWtCLEtBQUssZUFHcEQsSUFBSUMsRUFDRUMsRUFBd0IsU0FBUyxjQUFjLFdBQVcsRUFDNURGLEVBQU8sbUJBQ1BDLEVBQVksU0FBU0QsRUFBTyxrQkFBbUIsRUFBRSxFQUFJLEtBR3JERSxJQUEwQkEsRUFBc0IsTUFBTSxPQUFTRCxJQUN4REQsRUFBTyxVQUFZRSxFQUUxQkQsRUFBWUMsRUFBc0Isc0JBQXNCLEVBQUUsT0FBUyxLQUduRUQsRUFBWSxNQUloQixJQUFNRSxFQUF3QixTQUFTLGNBQWMsS0FBSyxFQUMxREEsRUFBc0IsVUFBVSxJQUFJLFVBQVUsRUFDOUMsT0FBTyxRQUFRLENBQ1gsUUFBUyxRQUNULFNBQVUsUUFDVixPQUFRSCxFQUFPLFNBQVdDLEVBQVksRUFDdEMsTUFBTyxPQUNQLE9BQVFBLENBQ1osQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDRyxFQUFHQyxDQUFDLElBQU0sQ0FDbkJGLEVBQXNCLE1BQU1DLENBQUMsRUFBSUMsQ0FDckMsQ0FBQyxFQUNELFNBQVMsY0FBYyxTQUFTLEVBQUUsWUFBWUYsQ0FBcUIsRUFHbkUsS0FBSyxnQkFBa0IsU0FBUyxjQUFjLEtBQUssRUFDbkQsT0FBTyxRQUFRLENBQ1gsT0FBUSxPQUNSLFdBQVksT0FDaEIsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDQyxFQUFHQyxDQUFDLElBQU0sQ0FDbkIsS0FBSyxnQkFBZ0IsTUFBTUQsQ0FBQyxFQUFJQyxDQUNwQyxDQUFDLEVBQ0RGLEVBQXNCLFlBQVksS0FBSyxlQUFlLEVBR3RELEtBQUssTUFBTUgsRUFBTyxZQUFZLENBQ2xDLEVBS0EsTUFBTyxDQUNILEdBQUksS0FBSyxTQUFVLE9BRW5CLElBQU1NLEVBRE0sQ0FBQyxJQUFJLEtBQ1MsS0FBSyxVQUFZLEtBQUssa0JBQzVDQSxFQUFjLEtBQUssY0FDbkIsS0FBSyxnQkFBZ0IsTUFBTSxNQUFRLE9BQ25DLEtBQUssV0FBYSxLQUVsQixLQUFLLGdCQUFnQixNQUFNLE1BQVFBLEVBQWMsS0FBSyxhQUFlLElBQU0sSUFDM0Usc0JBQXNCLEtBQUssS0FBSyxLQUFLLElBQUksQ0FBQyxFQUVsRCxFQUtBLGFBQWMsQ0FDTixLQUFLLFNBQ0wsS0FBSyxnQkFBZ0IsTUFBTSxnQkFBa0IsS0FBSyxlQUVsRCxLQUFLLGdCQUFnQixNQUFNLGdCQUFrQixLQUFLLFFBRTFELEVBT0EsTUFBTUMsRUFBY0QsRUFBYyxFQUFHLENBQ2pDLEtBQUssV0FBYSxHQUNsQixLQUFLLFNBQVcsR0FDaEIsS0FBSyxhQUFlQyxFQUNwQixLQUFLLFVBQVksQ0FBQyxJQUFJLEtBQVNELEVBQy9CLEtBQUssa0JBQW9CLEVBQ3pCLEtBQUssWUFBWSxFQUNqQixLQUFLLEtBQUssQ0FDZCxFQUVBLE9BQVEsQ0FDSixLQUFLLE1BQU0sS0FBSyxZQUFZLENBQ2hDLEVBRUEsT0FBUSxDQUNBLEtBQUssV0FDVCxLQUFLLFNBQVcsR0FDaEIsS0FBSyxVQUFZLENBQUMsSUFBSSxLQUN0QixLQUFLLFlBQVksRUFDckIsRUFFQSxRQUFTLENBQ0EsS0FBSyxXQUdWLEtBQUssU0FBVyxHQUNoQixLQUFLLG1CQUFxQixJQUFJLEtBQVMsS0FBSyxVQUM1QyxLQUFLLFVBQVksS0FDakIsS0FBSyxZQUFZLEVBQ2pCLEtBQUssS0FBSyxFQUNkLENBQ0osRUFFSSxPQUFPLFFBQVEsRUFDZlAsRUFBZSxZQUFZLEVBRTNCLE9BQU8saUJBQWlCLFFBQVMsSUFBTUEsRUFBZSxZQUFZLENBQUMiLAogICJuYW1lcyI6IFsiRWxhcHNlZFRpbWVCYXIiLCAiY29uZmlnIiwgImJhckhlaWdodCIsICJwYWdlUHJvZ3Jlc3NDb250YWluZXIiLCAidGltZVByb2dyZXNzQ29udGFpbmVyIiwgImsiLCAidiIsICJlbGFwc2VkVGltZSIsICJhbGxvdHRlZFRpbWUiXQp9Cg==
