/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    rowHeight: 48,
    rowCount: 2,
    spacing: 0,
    buttonWidth: 48,
    columnLayout: false,
    alwaysShowToolbar: false,
    mappedIcons: [],
    allowStylingOfAllActions: false,
    tooltips: false,
    heightOffset: 0,
};
const ICON_LIST = ["activity", "airplay", "alarm-check", "alarm-clock-off", "alarm-clock", "alarm-minus", "alarm-plus", "album", "alert-circle", "alert-octagon", "alert-triangle", "align-center-horizontal", "align-center-vertical", "align-center", "align-end-horizontal", "align-end-vertical", "align-horizontal-distribute-center", "align-horizontal-distribute-end", "align-horizontal-distribute-start", "align-horizontal-justify-center", "align-horizontal-justify-end", "align-horizontal-justify-start", "align-horizontal-space-around", "align-horizontal-space-between", "align-justify", "align-left", "align-right", "align-start-horizontal", "align-start-vertical", "align-vertical-distribute-center", "align-vertical-distribute-end", "align-vertical-distribute-start", "align-vertical-justify-center", "align-vertical-justify-end", "align-vertical-justify-start", "align-vertical-space-around", "align-vertical-space-between", "anchor", "aperture", "archive", "arrow-big-down", "arrow-big-left", "arrow-big-right", "arrow-big-up", "arrow-down-circle", "arrow-down-left", "arrow-down-right", "arrow-down", "arrow-left-circle", "arrow-left-right", "arrow-left", "arrow-right-circle", "arrow-right", "arrow-up-circle", "arrow-up-left", "arrow-up-right", "arrow-up", "asterisk", "at-sign", "award", "axe", "banknote", "bar-chart-2", "bar-chart", "baseline", "battery-charging", "battery-full", "battery-low", "battery-medium", "battery", "beaker", "bell-minus", "bell-off", "bell-plus", "bell-ring", "bell", "bike", "binary", "bitcoin", "bluetooth-connected", "bluetooth-off", "bluetooth-searching", "bluetooth", "bold", "book-open", "book", "bookmark-minus", "bookmark-plus", "bookmark", "bot", "box-select", "box", "briefcase", "brush", "bug", "building-2", "building", "bus", "calculator", "calendar", "camera-off", "camera", "car", "carrot", "cast", "check-circle-2", "check-circle", "check-square", "check", "chevron-down", "chevron-first", "chevron-last", "chevron-left", "chevron-right", "chevron-up", "chevrons-down-up", "chevrons-down", "chevrons-left", "chevrons-right", "chevrons-up-down", "chevrons-up", "chrome", "circle-slashed", "circle", "clipboard-check", "clipboard-copy", "clipboard-list", "clipboard-x", "clipboard", "clock-1", "clock-10", "clock-11", "clock-12", "clock-2", "clock-3", "clock-4", "clock-5", "clock-6", "clock-7", "clock-8", "clock-9", "lucide-clock", "cloud-drizzle", "cloud-fog", "cloud-hail", "cloud-lightning", "cloud-moon", "cloud-off", "cloud-rain-wind", "cloud-rain", "cloud-snow", "cloud-sun", "lucide-cloud", "cloudy", "clover", "code-2", "code", "codepen", "codesandbox", "coffee", "coins", "columns", "command", "compass", "contact", "contrast", "cookie", "copy", "copyleft", "copyright", "corner-down-left", "corner-down-right", "corner-left-down", "corner-left-up", "corner-right-down", "corner-right-up", "corner-up-left", "corner-up-right", "cpu", "credit-card", "crop", "lucide-cross", "crosshair", "crown", "currency", "database", "delete", "dice-1", "dice-2", "dice-3", "dice-4", "dice-5", "dice-6", "disc", "divide-circle", "divide-square", "divide", "dollar-sign", "download-cloud", "download", "dribbble", "droplet", "droplets", "drumstick", "edit-2", "edit-3", "edit", "egg", "equal-not", "equal", "eraser", "euro", "expand", "external-link", "eye-off", "eye", "facebook", "fast-forward", "feather", "figma", "file-check-2", "file-check", "file-code", "file-digit", "file-input", "file-minus-2", "file-minus", "file-output", "file-plus-2", "file-plus", "file-search", "file-text", "file-x-2", "file-x", "file", "files", "film", "filter", "flag-off", "flag-triangle-left", "flag-triangle-right", "flag", "flame", "flashlight-off", "flashlight", "flask-conical", "flask-round", "folder-minus", "folder-open", "folder-plus", "lucide-folder", "form-input", "forward", "frame", "framer", "frown", "function-square", "gamepad-2", "gamepad", "gauge", "gavel", "gem", "ghost", "gift", "git-branch-plus", "git-branch", "git-commit", "git-fork", "git-merge", "git-pull-request", "github", "gitlab", "glasses", "globe-2", "globe", "grab", "graduation-cap", "grid", "grip-horizontal", "grip-vertical", "hammer", "hand-metal", "hand", "hard-drive", "hard-hat", "hash", "haze", "headphones", "heart", "help-circle", "hexagon", "highlighter", "history", "home", "image-minus", "image-off", "image-plus", "image", "import", "inbox", "indent", "indian-rupee", "infinity", "lucide-info", "inspect", "instagram", "italic", "japanese-yen", "key", "keyboard", "landmark", "lucide-languages", "laptop-2", "laptop", "lasso-select", "lasso", "layers", "layout-dashboard", "layout-grid", "layout-list", "layout-template", "layout", "library", "life-buoy", "lightbulb-off", "lightbulb", "link-2-off", "link-2", "lucide-link", "linkedin", "list-checks", "list-minus", "list-ordered", "list-plus", "list-x", "list", "loader-2", "loader", "locate-fixed", "locate-off", "locate", "lock", "log-in", "log-out", "mail", "map-pin", "map", "maximize-2", "maximize", "megaphone", "meh", "menu", "message-circle", "message-square", "mic-off", "mic", "minimize-2", "minimize", "minus-circle", "minus-square", "minus", "monitor-off", "monitor-speaker", "monitor", "moon", "more-horizontal", "more-vertical", "mountain-snow", "mountain", "mouse-pointer-2", "mouse-pointer-click", "mouse-pointer", "mouse", "move-diagonal-2", "move-diagonal", "move-horizontal", "move-vertical", "move", "music", "navigation-2", "navigation", "network", "octagon", "option", "outdent", "package-check", "package-minus", "package-plus", "package-search", "package-x", "package", "palette", "palmtree", "paperclip", "pause-circle", "pause-octagon", "pause", "pen-tool", "lucide-pencil", "percent", "person-standing", "phone-call", "phone-forwarded", "phone-incoming", "phone-missed", "phone-off", "phone-outgoing", "phone", "pie-chart", "piggy-bank", "lucide-pin", "pipette", "plane", "play-circle", "play", "plug-zap", "plus-circle", "plus-square", "plus", "pocket", "podcast", "pointer", "pound-sterling", "power-off", "power", "printer", "qr-code", "quote", "radio-receiver", "radio", "redo", "refresh-ccw", "refresh-cw", "regex", "repeat-1", "repeat", "reply-all", "reply", "rewind", "rocket", "rocking-chair", "rotate-ccw", "rotate-cw", "rss", "ruler", "russian-ruble", "save", "scale", "scan-line", "scan", "scissors", "screen-share-off", "screen-share", "lucide-search", "send", "separator-horizontal", "separator-vertical", "server-crash", "server-off", "server", "settings-2", "settings", "share-2", "share", "sheet", "shield-alert", "shield-check", "shield-close", "shield-off", "shield", "shirt", "shopping-bag", "shopping-cart", "shovel", "shrink", "shuffle", "sidebar-close", "sidebar-open", "sidebar", "sigma", "signal-high", "signal-low", "signal-medium", "signal-zero", "signal", "skip-back", "skip-forward", "skull", "slack", "slash", "sliders", "smartphone-charging", "smartphone", "smile", "snowflake", "sort-asc", "sort-desc", "speaker", "sprout", "square", "star-half", "lucide-star", "stop-circle", "stretch-horizontal", "stretch-vertical", "strikethrough", "subscript", "sun", "sunrise", "sunset", "superscript", "swiss-franc", "switch-camera", "table", "tablet", "tag", "target", "tent", "terminal-square", "terminal", "text-cursor-input", "text-cursor", "thermometer-snowflake", "thermometer-sun", "thermometer", "thumbs-down", "thumbs-up", "ticket", "timer-off", "timer-reset", "timer", "toggle-left", "toggle-right", "tornado", "trash-2", "lucide-trash", "trello", "trending-down", "trending-up", "triangle", "truck", "tv-2", "tv", "twitch", "twitter", "type", "umbrella", "underline", "undo", "unlink-2", "unlink", "unlock", "upload-cloud", "upload", "user-check", "user-minus", "user-plus", "user-x", "user", "users", "verified", "vibrate", "video-off", "video", "view", "voicemail", "volume-1", "volume-2", "volume-x", "volume", "wallet", "wand", "watch", "waves", "webcam", "wifi-off", "wifi", "wind", "wrap-text", "wrench", "x-circle", "x-octagon", "x-square", "x", "youtube", "zap-off", "zap", "zoom-in", "zoom-out", "search-large"];

class ATSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        addEventListener("AT-iconPicked", () => {
            this.display();
        });
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Advanced Toolbar Settings' });
        if (obsidian.Platform.isDesktop) {
            containerEl.createEl('span', { text: "Please Note that this Plugin doesn't affect the Desktop App. It only applies to Obsidian's Mobile App.", cls: "setting-item AT-warning" });
        }
        new obsidian.Setting(containerEl)
            .setName("Toolbar Row Count")
            .setDesc("Set how many Rows the Mobile Toolbar should have. Set this to 0 to remove the Toolbar.")
            .addSlider(cb => cb
            .setLimits(0, 5, 1)
            .setValue(this.plugin.settings.rowCount)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.rowCount = value;
            yield this.plugin.saveSettings();
            this.plugin.updateStyles();
        })));
        new obsidian.Setting(containerEl)
            .setName("Column Layout")
            .setDesc("Use a column based layout instead of the default row. This makes it easier to arrange the Commands.")
            .addToggle(cb => cb
            .setValue(this.plugin.settings.columnLayout)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.columnLayout = value;
            yield this.plugin.saveSettings();
            this.plugin.updateStyles();
        })));
        new obsidian.Setting(containerEl)
            .setName("Show Tooltips for Quick Actions")
            .setDesc("Show Tooltips over the Quick Actions on hover. This helps to more easily identify Commands. IMPORTANT: Only works with a Stylus/Apple Pen/Mouse")
            .addToggle(cb => {
            cb.setValue(this.plugin.settings.tooltips)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.tooltips = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Allow Styling of all Quick Actions")
            .setDesc("If enabled you can change the Icons of all Quick Actions, not only these that don't provide their own Icon.")
            .addToggle(cb => cb
            .setValue(this.plugin.settings.allowStylingOfAllActions)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.allowStylingOfAllActions = value;
            yield this.plugin.saveSettings();
            this.display();
        })));
        new obsidian.Setting(containerEl)
            .setName("Bottom Offset")
            .setDesc("Offset the Toolbar from the Bottom of the Screen. This is useful if the toolbar is partially obscured by other UI Elements.")
            .addSlider(cb => cb
            .setLimits(0, 32, 1)
            .setValue(this.plugin.settings.heightOffset)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.heightOffset = value;
            yield this.plugin.saveSettings();
            this.plugin.updateStyles();
        })));
        if (obsidian.Platform.isMobile) {
            const description = document.createDocumentFragment();
            description.appendChild(createEl("h3", { text: "Custom Icons" }));
            containerEl.appendChild(description);
            if (this.plugin.settings.allowStylingOfAllActions) {
                this.plugin.getCommands().forEach(command => {
                    new obsidian.Setting(containerEl)
                        .setName(command.name)
                        .setDesc(`ID: ${command.id}`)
                        .addButton(bt => {
                        var _a;
                        const iconDiv = bt.buttonEl.createDiv({ cls: "AT-settings-icon" });
                        if (command.icon) {
                            obsidian.setIcon(iconDiv, command.icon, 20);
                        }
                        else {
                            const currentIcon = (_a = this.plugin.settings.mappedIcons.find(m => m.commandID === command.id)) === null || _a === void 0 ? void 0 : _a.iconID;
                            currentIcon ? obsidian.setIcon(iconDiv, currentIcon, 20) : bt.setButtonText("No Icon");
                        }
                        bt.onClick(() => {
                            new IconPicker(this.plugin, command, this.display).open();
                        });
                    })
                        .addExtraButton(bt => {
                        bt.setIcon("reset")
                            .setTooltip("Reset to default - Requires a restart")
                            .onClick(() => __awaiter(this, void 0, void 0, function* () {
                            this.plugin.settings.mappedIcons.remove(this.plugin.settings.mappedIcons.find((p) => p.iconID === command.icon));
                            command.icon = undefined;
                            yield this.plugin.saveSettings();
                            this.display();
                            new obsidian.Notice("If the default Icon doesn't appear, you might have to restart Obsidian.");
                        }));
                    });
                });
            }
            else {
                this.plugin.getCommandsWithoutIcons().forEach(command => {
                    new obsidian.Setting(containerEl)
                        .setName(command.name)
                        .setDesc(`ID: ${command.id}`)
                        .addButton(bt => {
                        var _a;
                        const iconDiv = bt.buttonEl.createDiv({ cls: "AT-settings-icon" });
                        if (command.icon) {
                            obsidian.setIcon(iconDiv, command.icon, 20);
                        }
                        else {
                            const currentIcon = (_a = this.plugin.settings.mappedIcons.find(m => m.commandID === command.id)) === null || _a === void 0 ? void 0 : _a.iconID;
                            currentIcon ? obsidian.setIcon(iconDiv, currentIcon, 20) : bt.setButtonText("No Icon");
                        }
                        bt.onClick(() => {
                            new IconPicker(this.plugin, command, this.display).open();
                        });
                    })
                        .addExtraButton(bt => {
                        bt.setIcon("reset")
                            .setTooltip("Reset to default - Requires a restart")
                            .onClick(() => __awaiter(this, void 0, void 0, function* () {
                            this.plugin.settings.mappedIcons.remove(this.plugin.settings.mappedIcons.find((p) => p.iconID === command.icon));
                            command.icon = undefined;
                            yield this.plugin.saveSettings();
                            this.display();
                            new obsidian.Notice("If the default Icon doesn't appear, you might have to restart Obsidian.");
                        }));
                    });
                });
            }
        }
        const advancedEl = containerEl.appendChild(createEl("details"));
        advancedEl.appendChild(createEl("summary", { text: "Advanced Settings" }));
        new obsidian.Setting(advancedEl)
            .setName("Button Height")
            .setDesc("Change the Height of each Button inside the Mobile Toolbar (in px).")
            .addText(cb => {
            var _a, _b;
            return cb
                .setValue((_b = (_a = this.plugin.settings.rowHeight) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "48")
                .setPlaceholder("48")
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                const height = Number(value);
                const invalid = isNaN(height);
                cb.inputEl.toggleClass("is-invalid", invalid);
                if (!invalid) {
                    this.plugin.settings.rowHeight = height;
                    yield this.plugin.saveSettings();
                    this.plugin.updateStyles();
                }
            }));
        });
        new obsidian.Setting(advancedEl)
            .setName("Button Width")
            .setDesc("Change the Width of each Button inside the Mobile Toolbar (in px).")
            .addText(cb => {
            var _a, _b;
            return cb
                .setValue((_b = (_a = this.plugin.settings.buttonWidth) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "48")
                .setPlaceholder("48")
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                const width = Number(value);
                const invalid = isNaN(width);
                cb.inputEl.toggleClass("is-invalid", invalid);
                if (!invalid) {
                    this.plugin.settings.buttonWidth = width;
                    yield this.plugin.saveSettings();
                    this.plugin.updateStyles();
                }
            }));
        });
        new obsidian.Setting(advancedEl)
            .setName("Toolbar Extra Spacing")
            .setDesc("Some Themes need extra spacing in the toolbar. If your Toolbar doesn't wrap properly, try increasing this value.")
            .addSlider(cb => cb
            .setLimits(0, 64, 1)
            .setValue(this.plugin.settings.spacing)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.spacing = value;
            yield this.plugin.saveSettings();
            this.plugin.updateStyles();
        })));
        new obsidian.Setting(advancedEl)
            .setName("Debugging")
            .setDesc("Enable Debugging")
            .addToggle(cb => {
            cb.setValue(this.plugin.settings.debugging);
            cb.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.debugging = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName('Donate')
            .setDesc('If you like this Plugin, consider donating to support continued development:')
            .setClass("AT-extra")
            .addButton((bt) => {
            bt.buttonEl.outerHTML = `<a href="https://ko-fi.com/phibr0"><img src="https://uploads-ssl.webflow.com/5c14e387dab576fe667689cf/61e11e22d8ff4a5b4a1b3346_Supportbutton-1.png"></a>`;
        });
    }
}
class IconPicker extends obsidian.FuzzySuggestModal {
    constructor(plugin, command, display) {
        super(plugin.app);
        this.plugin = plugin;
        this.command = command;
        this.setPlaceholder("Pick an Icon");
    }
    cap(string) {
        const words = string.split(" ");
        return words.map((word) => {
            return word[0].toUpperCase() + word.substring(1);
        }).join(" ");
    }
    getItems() {
        return ICON_LIST;
    }
    getItemText(item) {
        return this.cap(item.replace("feather-", "").replace(/-/ig, " "));
    }
    renderSuggestion(item, el) {
        el.addClass("AT-icon-container");
        const div = createDiv({ cls: "AT-icon" });
        el.appendChild(div);
        obsidian.setIcon(div, item.item);
        super.renderSuggestion(item, el);
    }
    onChooseItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.mappedIcons.remove(this.plugin.settings.mappedIcons.find(m => m.commandID === this.command.id));
            this.plugin.settings.mappedIcons.push({ commandID: this.command.id, iconID: item });
            yield this.plugin.saveSettings();
            this.plugin.injectIcons();
            this.close();
            setTimeout(() => {
                dispatchEvent(new Event("AT-iconPicked"));
                new obsidian.Notice("If the Icon doesn't appear, you might have to restart Obsidian.");
            }, 100);
        });
    }
}

class AdvancedToolbar extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading Advanced Mobile Toolbar plugin.');
            yield this.loadSettings();
            this.addSettingTab(new ATSettingsTab(this.app, this));
            document.body.addClass('advanced-toolbar');
            if (obsidian.Platform.isDesktop) {
                console.log('Advanced Mobile Toolbar detected desktop Obsidian and is aborting. You still have access to change the settings.');
                return;
            }
            this.app.workspace.onLayoutReady(() => {
                this.updateStyles();
                this.injectIcons();
                //Toolbar Opened Event:
                new MutationObserver((event) => {
                    var _a;
                    //@ts-ignore
                    if ((_a = event.first().addedNodes.item(0)) === null || _a === void 0 ? void 0 : _a.hasClass("mobile-toolbar")) {
                        dispatchEvent(new CustomEvent("toolbarOpened", { detail: { "toolbar": event.first().addedNodes.item(0) } }));
                    }
                }).observe(document.body.getElementsByClassName("app-container").item(0), { childList: true });
            });
            addEventListener("toolbarOpened", (e) => this.injectHoverTooltips(e.detail.toolbar));
        });
    }
    onunload() {
        console.log('Unloading Advanced Mobile Toolbar plugin.');
        this.removeStyles();
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    updateStyles() {
        var _a, _b;
        const { classList: c, style: s } = document.body;
        s.setProperty("--at-button-height", ((_a = this.settings.rowHeight) !== null && _a !== void 0 ? _a : 48) + "px");
        s.setProperty("--at-button-width", ((_b = this.settings.buttonWidth) !== null && _b !== void 0 ? _b : 48) + "px");
        s.setProperty("--at-row-count", this.settings.rowCount.toString());
        s.setProperty("--at-spacing", (this.settings.spacing) + "px");
        s.setProperty("--at-offset", (this.settings.heightOffset) + "px");
        c.toggle('AT-multirow', this.settings.rowCount > 1);
        c.toggle('AT-row', !this.settings.columnLayout);
        c.toggle('AT-column', this.settings.columnLayout);
        c.toggle('AT-no-toolbar', this.settings.rowCount === 0);
        c.toggle('AT-always-shown', this.settings.alwaysShowToolbar);
    }
    removeStyles() {
        const { classList: c, style: s } = document.body;
        s.removeProperty("--at-button-height");
        s.removeProperty("--at-button-width");
        s.removeProperty("--at-row-count");
        s.removeProperty("--at-spacing");
        s.removeProperty("--at-offset");
        c.remove('AT-multirow');
        c.remove('AT-row');
        c.remove('AT-column');
        c.remove('AT-no-toolbar');
        c.remove('advanced-toolbar');
    }
    listActiveToolbarCommands() {
        //@ts-ignore
        const activeCommands = this.app.vault.getConfig('mobileToolbarCommands');
        return activeCommands;
    }
    getCommands() {
        const commands = [];
        this.listActiveToolbarCommands().forEach(id => {
            //@ts-ignore
            const c = this.app.commands.commands[id];
            if (c)
                commands.push(c);
        });
        return commands;
    }
    getCommandsWithoutIcons(includeSelfAdded = true) {
        const commands = [];
        this.getCommands().forEach(c => {
            if (c && !c.icon) {
                commands.push(c);
            }
        });
        if (includeSelfAdded) {
            this.getCommands().forEach(c => {
                if (this.settings.mappedIcons.find(m => m.commandID === c.id)) {
                    commands.push(c);
                }
            });
        }
        return commands;
    }
    injectIcons() {
        this.settings.mappedIcons.forEach(mapped => {
            //@ts-ignore 
            const command = this.app.commands.commands[mapped.commandID];
            if (command) {
                command.icon = mapped.iconID;
            }
            else {
                this.settings.mappedIcons.remove(mapped);
            }
        });
        this.saveSettings();
    }
    injectHoverTooltips(el) {
        if (this.settings.tooltips) {
            const commands = this.getCommands();
            el.firstChild.childNodes.forEach((child, i) => {
                var _a;
                child.setAttrs({
                    "aria-label": (_a = commands[i]) === null || _a === void 0 ? void 0 : _a.name.replace(/.*: /, ""),
                    "aria-label-position": "top"
                });
            });
        }
    }
}

module.exports = AdvancedToolbar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
